AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Impulsame Backend API

Parameters:
  Environment:
    Type: String
    AllowedValues: [dev, main]
    Default: dev
    Description: Environment name (dev or main)
  DbHost:
    Type: String
    Description: Database host
    NoEcho: true
  DbUser:
    Type: String
    Description: Database username
    NoEcho: true
  DbPass:
    Type: String
    Description: Database password
    NoEcho: true
  DbName:
    Type: String
    Description: Database name
    Default: impulsame_dev
  VpcId:
    Type: String
    Description: VPC ID for Lambda functions
    Default: vpc-07a2057b856abc88a
  SubnetId1:
    Type: String
    Description: First subnet ID for Lambda functions
    Default: subnet-0a4c6ec40547ef6bc
  SubnetId2:
    Type: String
    Description: Second subnet ID for Lambda functions (optional)
    Default: ""
  SubnetId3:
    Type: String
    Description: Third subnet ID for Lambda functions (optional)
    Default: ""
  SecurityGroupId:
    Type: String
    Description: Security Group ID for Lambda functions
    Default: sg-041ca83b054423bae

Globals:
  Function:
    Timeout: 60  # Reducir a 60 segundos para solo texto
    Runtime: python3.13
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
    Layers:
      - !Ref PythonDependenciesLayer
    VpcConfig:
      SecurityGroupIds:
        - !Ref SecurityGroupId
      SubnetIds:
        - !Ref SubnetId1

Resources:
  # API Gateway
  ImpulsameApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${Environment}-impulsame-api"
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"

  # Lambda Layer para dependencias Python
  PythonDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "${Environment}-python-dependencies"
      Description: Dependencias Python compartidas
      ContentUri: layers/python-deps/
      CompatibleRuntimes:
        - python3.13
    Metadata:
      BuildMethod: python3.13

  # Función Lambda: Users Register
  UsersRegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-users-register"
      CodeUri: lambdas/users-register-post/
      Handler: lambda_function.lambda_handler
      Timeout: 60  # Suficiente para solo procesar texto
      MemorySize: 256  # Reducir memoria ya que no procesamos archivos base64
      Environment:
        Variables:
          DB_HOST: !Ref DbHost
          DB_USER: !Ref DbUser
          DB_PASS: !Ref DbPass
          DB_NAME: !Ref DbName
          AWS_BUCKET_USER_DATOS: !Ref UserDocumentsBucket
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:GetObject
                - s3:DeleteObject
              Resource: !Sub "${UserDocumentsBucket.Arn}/*"
            - Effect: Allow
              Action:
                - s3:ListBucket
              Resource: !GetAtt UserDocumentsBucket.Arn
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface
                - ec2:DescribeNetworkInterfaces
                - ec2:DeleteNetworkInterface
                - ec2:AttachNetworkInterface
                - ec2:DetachNetworkInterface
              Resource: "*"
      Events:
        RegisterApi:
          Type: Api
          Properties:
            RestApiId: !Ref ImpulsameApi
            Path: /users/register
            Method: post

  # S3 Bucket para documentos de usuarios
  UserDocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-impulsame-user-documents.pulbot.store"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - HEAD
              - PUT
              - POST
            AllowedOrigins:
              - !Sub "https://${Environment}-impulsame-user-documents.pulbot.store"
              - "*"
            MaxAge: 3000

  # Política del bucket S3 para permitir acceso de CloudFront y Lambda
  UserDocumentsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref UserDocumentsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowCloudFrontAccess
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "${UserDocumentsBucket.Arn}/*"
          - Sid: AllowPublicRead
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "${UserDocumentsBucket.Arn}/*"
          - Sid: AllowLambdaWrite
            Effect: Allow
            Principal:
              AWS: !GetAtt UsersRegisterFunctionRole.Arn
            Action: 
              - s3:PutObject
              - s3:PutObjectAcl
              - s3:DeleteObject
            Resource: !Sub "${UserDocumentsBucket.Arn}/*"
          - Sid: AllowLambdaList
            Effect: Allow
            Principal:
              AWS: !GetAtt UsersRegisterFunctionRole.Arn
            Action: s3:ListBucket
            Resource: !GetAtt UserDocumentsBucket.Arn

Outputs:
  ImpulsameApi:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ImpulsameApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"
    Export:
      Name: !Sub "${Environment}-impulsame-api-url"

  UsersRegisterFunction:
    Description: "Users Register Lambda Function ARN"
    Value: !GetAtt UsersRegisterFunction.Arn
    Export:
      Name: !Sub "${Environment}-users-register-function-arn"

  UserDocumentsBucket:
    Description: "S3 Bucket for user documents"
    Value: !Ref UserDocumentsBucket
    Export:
      Name: !Sub "${Environment}-user-documents-bucket"

  UserDocumentsBucketArn:
    Description: "S3 Bucket ARN for user documents"
    Value: !GetAtt UserDocumentsBucket.Arn
    Export:
      Name: !Sub "${Environment}-user-documents-bucket-arn"

  UserDocumentsBucketDomainName:
    Description: "S3 Bucket domain name for CloudFront origin"
    Value: !GetAtt UserDocumentsBucket.RegionalDomainName
    Export:
      Name: !Sub "${Environment}-user-documents-bucket-domain"

  UserDocumentsBucketWebsiteUrl:
    Description: "S3 Bucket website URL"
    Value: !GetAtt UserDocumentsBucket.WebsiteURL
    Export:
      Name: !Sub "${Environment}-user-documents-website-url"

  ExpectedCloudFrontDomain:
    Description: "Expected CloudFront domain name for this environment"
    Value: !Sub "${Environment}-impulsame-user-documents.pulbot.store"
    Export:
      Name: !Sub "${Environment}-expected-cloudfront-domain"
