name: Deploy Backend to AWS

on:
  push:
    branches: 
      - dev
      - main
    paths:
      - 'lambdas/**'
      - 'template.yaml'
      - 'layers/**'
      - '.github/workflows/deploy-backend.yml'

env:
  AWS_REGION: us-east-1

jobs:
  generate-changelog:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Fetch full history for changelog generation

    - name: Generate Changelog
      id: changelog
      uses: TriPSs/conventional-changelog-action@v5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        output-file: 'CHANGELOG.md'
        release-count: '10'
        version-file: 'package.json'
        version-path: 'version'
        create-summary: 'true'
        skip-on-empty: 'true'
        skip-version-file: 'false'
        skip-commit: 'false'
        git-message: 'chore(release): {version} [skip ci]'
        preset: 'angular'

    - name: Create Release
      uses: actions/create-release@v1
      if: ${{ steps.changelog.outputs.skipped == 'false' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.changelog.outputs.tag }}
        release_name: ${{ steps.changelog.outputs.tag }}
        body: ${{ steps.changelog.outputs.clean_changelog }}
        draft: false
        prerelease: false

  deploy:
    runs-on: ubuntu-latest
    needs: [generate-changelog]
    if: always() && (needs.generate-changelog.result == 'success' || needs.generate-changelog.result == 'skipped')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Set up AWS SAM CLI
      uses: aws-actions/setup-sam@v2
      with:
        use-installer: true

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Set environment based on branch
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "ENVIRONMENT=main" >> $GITHUB_ENV
        elif [ "${{ github.ref }}" = "refs/heads/dev" ]; then
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
        else
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV  # Por defecto dev para feature branches
        fi

    - name: Install dependencies in layer
      run: |
        mkdir -p layers/python-deps/python
        pip install -r lambdas/users-register-post/requirements.txt -t layers/python-deps/python/
        # Instalar dependencias del nuevo lambda si tiene requirements.txt separado
        if [ -f lambdas/request-files-get-upload-urls/requirements.txt ]; then
          pip install -r lambdas/request-files-get-upload-urls/requirements.txt -t layers/python-deps/python/
        fi

    - name: Build SAM application
      run: |
        sam build --use-container

    - name: Create S3 bucket for SAM artifacts (if not exists)
      run: |
        BUCKET_NAME="sam-artifacts-${{ env.ENVIRONMENT }}-impulsame"
        aws s3 mb s3://$BUCKET_NAME --region ${{ env.AWS_REGION }} || echo "Bucket already exists"

    - name: Check and fix CloudFormation stack state
      run: |
        STACK_NAME="${{ env.ENVIRONMENT }}-impulsame-backend"
        STACK_STATUS=$(aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].StackStatus' \
          --output text 2>/dev/null || echo "STACK_NOT_EXISTS")
        
        echo "Stack status: $STACK_STATUS"
        
        if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
          echo "Stack is in ROLLBACK_COMPLETE state. Deleting stack..."
          aws cloudformation delete-stack \
            --stack-name $STACK_NAME \
            --region ${{ env.AWS_REGION }}
          
          echo "Waiting for stack deletion to complete..."
          aws cloudformation wait stack-delete-complete \
            --stack-name $STACK_NAME \
            --region ${{ env.AWS_REGION }}
          
          echo "Stack deleted successfully"
        elif [ "$STACK_STATUS" = "DELETE_FAILED" ]; then
          echo "Stack deletion failed previously. Manual intervention required."
          exit 1
        fi

    - name: Deploy SAM application
      run: |
        if [ "${{ env.ENVIRONMENT }}" = "dev" ]; then
          sam deploy --config-env dev \
            --parameter-overrides \
              Environment=dev \
              DbHost="${{ secrets.DEV_DB_HOST }}" \
              DbUser="${{ secrets.DEV_DB_USER }}" \
              DbPass="${{ secrets.DEV_DB_PASS }}" \
              DbName="${{ secrets.DEV_DB_NAME }}" \
              VpcId="${{ secrets.VPC_ID }}" \
              SubnetId1="${{ secrets.SUBNET_ID_1 }}" \
              SubnetId2="${{ secrets.SUBNET_ID_2 || '' }}" \
              SubnetId3="${{ secrets.SUBNET_ID_3 || '' }}" \
              SecurityGroupId="${{ secrets.SECURITY_GROUP_ID }}"
        else
          sam deploy --config-env main \
            --parameter-overrides \
              Environment=main \
              DbHost="${{ secrets.MAIN_DB_HOST }}" \
              DbUser="${{ secrets.MAIN_DB_USER }}" \
              DbPass="${{ secrets.MAIN_DB_PASS }}" \
              DbName="${{ secrets.MAIN_DB_NAME }}" \
              VpcId="${{ secrets.VPC_ID }}" \
              SubnetId1="${{ secrets.SUBNET_ID_1 }}" \
              SubnetId2="${{ secrets.SUBNET_ID_2 || '' }}" \
              SubnetId3="${{ secrets.SUBNET_ID_3 || '' }}" \
              SecurityGroupId="${{ secrets.SECURITY_GROUP_ID }}"
        fi

    - name: Get API Gateway URL
      run: |
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.ENVIRONMENT }}-impulsame-backend \
          --query 'Stacks[0].Outputs[?OutputKey==`ImpulsameApi`].OutputValue' \
          --output text \
          --region ${{ env.AWS_REGION }})
        echo "API Gateway URL: $API_URL"
        echo "::notice::API Gateway deployed at $API_URL"
        
        # Mostrar la URL del nuevo endpoint
        UPLOAD_URL="${API_URL}request/files/get-upload-urls"
        echo "Upload URLs Endpoint: $UPLOAD_URL"
        echo "::notice::File Upload URLs endpoint available at $UPLOAD_URL"

    - name: Upload static files to S3 bucket
      run: |
        BUCKET_NAME="${{ env.ENVIRONMENT }}-impulsame-user-documents.pulbot.store"
        
        # Upload index.html
        aws s3 cp static-files/index.html s3://$BUCKET_NAME/index.html \
          --content-type "text/html" \
          --cache-control "max-age=300"
        
        # Get website URL
        WEBSITE_URL=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.ENVIRONMENT }}-impulsame-backend \
          --query 'Stacks[0].Outputs[?OutputKey==`UserDocumentsBucketWebsiteUrl`].OutputValue' \
          --output text \
          --region ${{ env.AWS_REGION }})
        
        echo "S3 Website URL: $WEBSITE_URL"
        echo "::notice::S3 Website available at $WEBSITE_URL"
